name: Deploy Palate API's

on:
  workflow_dispatch:
    inputs:
      repoName:
        description: 'Repository to Deploy'     
        required: true
        type: choice
        default: 'palate-app-common-data-api'
        options:
          - palate-app-common-data-api
          - palate-app-review-api
          - palate-app-search-reviews-api
          - palate-app-user-api
      shaId:
        description: 'Commit id to Deploy'     
        required: true
        default: 'main'
      deployEnvironment:
        description: 'Environment to Deploy'     
        required: true
        type: choice
        default: 'dev'
        options:
          - dev

env:
  REPO_NAME: ${{ github.event.inputs.repoName }}
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: ${{ github.event.inputs.repoName }}
  SHA_ID: ${{ github.event.inputs.shaId }}
  DEPLOY_ENV: ${{ github.event.inputs.deployEnvironment }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout main branch
      if: ${{ env.SHA_ID == 'main'}}
      uses: actions/checkout@v3
      with:
        ref: refs/heads/${{ env.SHA_ID }}
        repository: Palatepower77/${{ env.REPO_NAME }}
        token: ${{ secrets.GIT_TOKEN }}
    - name: Checkout Commit id
      if: ${{ env.SHA_ID != 'main'}}
      uses: actions/checkout@v3
      with:
        ref: ${{ env.SHA_ID }}
        repository: Palatepower77/${{ env.REPO_NAME }}
        token: ${{ secrets.GIT_TOKEN }}
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1      

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        if [ "${{ env.DEPLOY_ENV }}" = "dev" ]; then IMAGE_TAG="latest"; else IMAGE_TAG="hotfix"; fi
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
    - name: Update ECS for new Image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        if [ "${{ env.DEPLOY_ENV }}" = "dev" ]; 
        then
          if [ "${{ env.REPO_NAME }}" = "palate-app-common-data-api" ]; then
            ECS_SERVICE="common-data-api-service-new";
          elif [ "${{ env.REPO_NAME }}" = "palate-app-review-api" ]; then
            ECS_SERVICE="review-api-service";
          elif [ "${{ env.REPO_NAME }}" = "palate-app-search-reviews-api" ]; then
            ECS_SERVICE="search-reviews-api-service";
          elif [ "${{ env.REPO_NAME }}" = "palate-app-user-api" ]; then
            ECS_SERVICE="palate-user-api-service";
          fi
          ECS_CLUSTER="palate-app-dev-cluster"; 
        else
          if [ "${{ env.REPO_NAME }}" = "palate-app-common-data-api" ]; then
            ECS_SERVICE="common-data-api-service";
          elif [ "${{ env.REPO_NAME }}" = "palate-app-review-api" ]; then
            ECS_SERVICE="review-api-service";
          elif [ "${{ env.REPO_NAME }}" = "palate-app-search-reviews-api" ]; then
            ECS_SERVICE="search-reviews-api-service";
          elif [ "${{ env.REPO_NAME }}" = "palate-app-user-api" ]; then
            ECS_SERVICE="palate-user-api-service";
          fi
          ECS_CLUSTER="palate-app-prod-cluster";
        fi

        aws ecs update-service --service $ECS_SERVICE --cluster $ECS_CLUSTER --force-new-deployment

    - name: Download JMeter
      run: |
        wget -O jmeter.tgz https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz
        tar -xzf jmeter.tgz
    - name: Run JMeter Test
      run: |
        ./apache-jmeter-5.5/bin/jmeter -JTOKEN=${{ secrets.TOKEN }} -n -t /home/runner/work/palate-app-infrastructure/Palate_App.jmx
