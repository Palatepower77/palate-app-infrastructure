<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Palate App" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Signup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;phonenumber&quot;: &quot;${phoneNumber}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/user/signup</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;phonenumber&quot;: &quot;${phoneNumber}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/user/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;phonenumber&quot;: &quot;${phoneNumber}&quot;,&#xd;
    &quot;confirmationCode&quot;: &quot;123456&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/user/confirm-login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save User" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/unicorn.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/unicorn.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:
&quot;mutation SaveUser($input: UserInput!) 
{ saveUser(input: $input)
  { success 
    user { 
        handle
        firstname 
        lastname
        email
        profilephotoid
        bio
      }
   } 
}&quot;,
&quot;variables&quot;:
 {&quot;input&quot;:   
  {
   &quot;handle&quot;:&quot;Riya&quot;,
   &quot;firstname&quot;:&quot;Riya&quot;,
   &quot;lastname&quot;:&quot;D&quot;,
   &quot;gender&quot;:&quot;Female&quot;,
   &quot;dob&quot;:&quot;2000-01-22&quot;,
   &quot;email&quot;:&quot;riya@gmail.com&quot;,
   &quot;bio&quot;: &quot;It Student&quot;
  }
 }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Profile Photo" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/download-profile/goFZbhLsiL_1686636582627_Profile</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    userDetails{\n       handle\n       firstname\n       lastname\n       gender\n       dob\n       email\n       phonenumber\n       profilephotoid\n       bio\n       buddylist {\n        id\n        handle\n        firstname\n        lastname\n        gender\n        dob\n        email\n        phonenumber\n        profilephotoid\n        bio\n      }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    userDetails{
       handle
       firstname
       lastname
       gender
       dob
       email
       phonenumber
       profilephotoid
       bio
       buddylist {
        id
        handle
        firstname
        lastname
        gender
        dob
        email
        phonenumber
        profilephotoid
        bio
      }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get User (by id)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n   getUser(input: {\n    id : 117\n    }){\n        isMyBuddy\n        user {\n            id\n            handle\n            firstname\n            lastname\n            gender\n            dob\n            email\n            phonenumber\n            profilephotoid\n            bio\n            buddylist {\n             id\n             handle\n             firstname\n             lastname\n             gender\n             dob\n             email\n             phonenumber\n             profilephotoid\n             bio\n        }\n    }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
   getUser(input: {
    id : 117
    }){
        isMyBuddy
        user {
            id
            handle
            firstname
            lastname
            gender
            dob
            email
            phonenumber
            profilephotoid
            bio
            buddylist {
             id
             handle
             firstname
             lastname
             gender
             dob
             email
             phonenumber
             profilephotoid
             bio
        }
    }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get User (by handle)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n   getUser(input: {\n    handle : \&quot;Riya\&quot;\n    }){\n        isMyBuddy\n        user {\n            id\n            handle\n            firstname\n            lastname\n            gender\n            dob\n            email\n            phonenumber\n            profilephotoid\n            bio\n            buddylist {\n             id\n             handle\n             firstname\n             lastname\n             gender\n             dob\n             email\n             phonenumber\n             profilephotoid\n             bio\n        }\n    }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
   getUser(input: {
    handle : &quot;Riya&quot;
    }){
        isMyBuddy
        user {
            id
            handle
            firstname
            lastname
            gender
            dob
            email
            phonenumber
            profilephotoid
            bio
            buddylist {
             id
             handle
             firstname
             lastname
             gender
             dob
             email
             phonenumber
             profilephotoid
             bio
        }
    }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get User (by phone number)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n   getUser(input: {\n    phonenumber : 917385407847\n    }){\n        isMyBuddy\n        user {\n            id\n            handle\n            firstname\n            lastname\n            gender\n            dob\n            email\n            phonenumber\n            profilephotoid\n            bio\n            buddylist {\n             id\n             handle\n             firstname\n             lastname\n             gender\n             dob\n             email\n             phonenumber\n             profilephotoid\n             bio\n        }\n    }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
   getUser(input: {
    phonenumber : 917385407847
    }){
        isMyBuddy
        user {
            id
            handle
            firstname
            lastname
            gender
            dob
            email
            phonenumber
            profilephotoid
            bio
            buddylist {
             id
             handle
             firstname
             lastname
             gender
             dob
             email
             phonenumber
             profilephotoid
             bio
        }
    }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Validate Handle (available)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    isHandleAvailable(input:\&quot;Divyanshi\&quot;)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    isHandleAvailable(input:&quot;Divyanshi&quot;)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Validate Handle (unavailable)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    isHandleAvailable(input:\&quot;Divya\&quot;)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    isHandleAvailable(input:&quot;Divya&quot;)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Add User Buddies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation {\n\t\tsaveUserBuddies(input: {\n                userId: 119\n                buddyId: 117\n            }\n        ) \n        {\n\t\t  success\n            message\n\t\t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation {
		saveUserBuddies(input: {
                userId: 119
                buddyId: 117
            }
        ) 
        {
		  success
            message
		}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Remove User Buddies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation {\n\t\tdeleteUserBuddies(input: {\n                userId: 119\n                buddyId: 117\n            }\n        ) \n        {\n\t\t  success\n            message\n\t\t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation {
		deleteUserBuddies(input: {
                userId: 119
                buddyId: 117
            }
        ) 
        {
		  success
            message
		}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Post User Preference" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation { \n     postUserPreference(userPreference: {\n         diet: [VEG,VEGAN, NON_VEG]\n         dishTypes: [FAST_FOOD, FUSION, DESSERT, BRUNCH]\n         location: \&quot;Devgad\&quot;\n         cuisine: [\&quot;INDIAN\&quot;,\&quot;ITALIAN \&quot;]\n         vendorType: [\&quot;CAFE\&quot;,\&quot;OUTLET\&quot;,\&quot;RESTAURANT\&quot;]\n         priceRange: {min: 10, max: 300}\n         distance: 50\n         longitude: 73.382888\n         latitude: 16.375383\n        }) \n        { \n            success\n            userPreference { \n                diet\n                dishTypes\n                location\n                cuisine\n                vendorType\n                priceRange{min, max}\n                longitude\n                latitude\n            } \n        }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query"> mutation { 
     postUserPreference(userPreference: {
         diet: [VEG,VEGAN, NON_VEG]
         dishTypes: [FAST_FOOD, FUSION, DESSERT, BRUNCH]
         location: &quot;Devgad&quot;
         cuisine: [&quot;INDIAN&quot;,&quot;ITALIAN &quot;]
         vendorType: [&quot;CAFE&quot;,&quot;OUTLET&quot;,&quot;RESTAURANT&quot;]
         priceRange: {min: 10, max: 300}
         distance: 50
         longitude: 73.382888
         latitude: 16.375383
        }) 
        { 
            success
            userPreference { 
                diet
                dishTypes
                location
                cuisine
                vendorType
                priceRange{min, max}
                longitude
                latitude
            } 
        }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get User Preference" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{ \n    getUserPreference(userId: 119){ \n        userId\n        diet \n        dishTypes\n        location \n        cuisine\n        vendorType \n        priceRange { min max }\n        longitude\n        latitude\n    } \n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{ 
    getUserPreference(userId: 119){ 
        userId
        diet 
        dishTypes
        location 
        cuisine
        vendorType 
        priceRange { min max }
        longitude
        latitude
    } 
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Deactivate Account" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;//query{\n//   accountDeactivate\n//}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">//query{
//   accountDeactivate
//}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Review API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Review (with valid image)" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/paneer-koftaa.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/paneer-koftaa.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:
 &quot;mutation 
 ($dishReview: DishReviewInput!) 
  { PostDishReview
   (dishReview: $dishReview)
   { success
    dishReview
     { 
      id
      userId
      dishId
      cuisineType
      rating
      photoId
      dishPrice
      currencyCode
      vendorId
      dishName
      diet 
      dishTypes 
      longitude 
      latitude 
     } 
    } 
  }&quot;,
  &quot;variables&quot;:
   {&quot;dishReview&quot;:                    
     {
      &quot;dishId&quot;:1,                    
      &quot;cuisineType&quot;:&quot;INDIAN&quot;,
      &quot;rating&quot;:4,
      &quot;dishPrice&quot;:150,
      &quot;currencyCode&quot;:&quot;INR&quot;,
      &quot;vendorName&quot;:&quot;Purva resort, Revtale Road, Malvan 416606, India&quot;,
      &quot;vendorType&quot;:&quot;RESTAURANT&quot;,
      &quot;vendorSource&quot;:&quot;CUSTOM&quot;,
      &quot;dishName&quot;:&quot;Imarti&quot;,
      &quot;diet&quot;:&quot;VEG&quot;,
   &quot;dishTypes&quot;:[&quot;MAINS&quot;,&quot;BRUNCH&quot;],
      &quot;longitude&quot;:&quot;73.37484&quot;,
      &quot;latitude&quot;:&quot;16.371944&quot;
    }
   }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def json = new JsonSlurper().parseText(response)

def reviewid = json.data.PostDishReview.dishReview.id
def photoid = json.data.PostDishReview.dishReview.photoId

if (reviewid != null &amp;&amp; photoid != null) {
    props.put(&quot;reviewId&quot;, reviewid.toString())
    props.put(&quot;dishPhotoId&quot;, photoid.toString())
}
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Review (with invalid image)" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/unicorn.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/unicorn.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:
 &quot;mutation 
 ($dishReview: DishReviewInput!) 
  { PostDishReview
   (dishReview: $dishReview)
   { success
    dishReview
     { 
      id
      userId
      dishId
      cuisineType
      rating
      photoId
      dishPrice
      currencyCode
      vendorId
      dishName
      diet 
      dishTypes 
      longitude 
      latitude 
     } 
    } 
  }&quot;,
  &quot;variables&quot;:
   {&quot;dishReview&quot;:                    
     {
      &quot;dishId&quot;:1,                    
      &quot;cuisineType&quot;:&quot;INDIAN&quot;,
      &quot;rating&quot;:4,
      &quot;dishPrice&quot;:150,
      &quot;currencyCode&quot;:&quot;INR&quot;,
      &quot;vendorName&quot;:&quot; Purva resort, Revtale Road,malvan 416606, India &quot;,
      &quot;vendorType&quot;:&quot;RESTAURANT&quot;,
      &quot;vendorSource&quot;:&quot;CUSTOM&quot;,
      &quot;dishName&quot;:&quot;White Souce Pasta&quot;,
      &quot;diet&quot;:&quot;VEG&quot;,
   &quot;dishTypes&quot;:[&quot;MAINS&quot;,&quot;BRUNCH&quot;],
      &quot;longitude&quot;:&quot;73.37484&quot;,
      &quot;latitude&quot;:&quot;16.371944&quot;
    }
   }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def json = new JsonSlurper().parseText(response)

def reviewid = json.data.PostDishReview.dishReview.id

if (reviewid != null) {
    props.put(&quot;invalidReviewId&quot;, reviewid.toString())
}
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Dish Picture" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/download-file/${__P(dishPhotoId)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Dish Review" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/paneer-koftaa.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/paneer-koftaa.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:
 &quot;mutation 
 ($dishReview: DishReviewInput!) 
  {UpdateDishReview
   (dishReview: $dishReview)
   { success
    dishReview
     { id
      userId
      dishId
      cuisineType
      rating
      photoId
      dishPrice
      currencyCode
      vendorId
      dishName
      diet 
      dishTypes 
      longitude 
      latitude 
     } 
    } 
  }&quot;,
  &quot;variables&quot;:
   {&quot;dishReview&quot;:                    
     {
      &quot;id&quot;:${__P(reviewId)},
      &quot;dishId&quot;:1,                    
      &quot;cuisineType&quot;:&quot;INDIAN&quot;,
      &quot;rating&quot;:4,
      &quot;dishPrice&quot;:50,
      &quot;currencyCode&quot;:&quot;INR&quot;,
      &quot;vendorName&quot;:&quot;Purva resort, Revtale Road, Malvan 416606, India&quot;,
      &quot;vendorType&quot;:&quot;RESTAURANT&quot;,
      &quot;vendorSource&quot;:&quot;CUSTOM&quot;,
      &quot;dishName&quot;:&quot;Imarti&quot;,
      &quot;diet&quot;:&quot;VEG&quot;,
   	 &quot;dishTypes&quot;:[&quot;MAINS&quot;,&quot;BRUNCH&quot;],
      &quot;longitude&quot;:&quot;73.37484&quot;,
      &quot;latitude&quot;:&quot;16.371944&quot;
    }
   }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname=" User Reaction (add LIKE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{ updateUserReaction(inputReaction:{ \n    reviewId:${__P(reviewId)},\n    reaction:LIKE \n    value:true\n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{ updateUserReaction(inputReaction:{ 
    reviewId:${__P(reviewId)},
    reaction:LIKE 
    value:true
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname=" User Reaction (add FAVOURITE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{ updateUserReaction(inputReaction:{ \n    reviewId:${__P(reviewId)},\n    reaction:FAVOURITE \n    value:true\n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{ updateUserReaction(inputReaction:{ 
    reviewId:${__P(reviewId)},
    reaction:FAVOURITE 
    value:true
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname=" User Reaction (add SHARE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{ updateUserReaction(inputReaction:{ \n    reviewId:${__P(reviewId)},\n    reaction:SHARE \n    value:true\n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{ updateUserReaction(inputReaction:{ 
    reviewId:${__P(reviewId)},
    reaction:SHARE 
    value:true
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname=" User Reaction (remove LIKE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{ updateUserReaction(inputReaction:{ \n    reviewId:${__P(reviewId)},\n    reaction:LIKE \n    value:false\n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{ updateUserReaction(inputReaction:{ 
    reviewId:${__P(reviewId)},
    reaction:LIKE 
    value:false
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname=" User Reaction (remove from FAVOURITE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{ updateUserReaction(inputReaction:{ \n    reviewId:${__P(reviewId)},\n    reaction:FAVOURITE \n    value:false\n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{ updateUserReaction(inputReaction:{ 
    reviewId:${__P(reviewId)},
    reaction:FAVOURITE 
    value:false
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Delete Dish Review (with valid image)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{\n    DeleteDishReview(id:${__P(reviewId)})\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{
    DeleteDishReview(id:${__P(reviewId)})
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Delete Dish Review (with invalid image)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{\n    DeleteDishReview(id:${__P(invalidReviewId)})\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{
    DeleteDishReview(id:${__P(invalidReviewId)})
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
              <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Load Reviews to Elastic" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;//query{\n//     loadReviewsToElastic\n//}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">//query{
//     loadReviewsToElastic
//}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Search API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Default Search" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    defaultSearch(input: {\n        recordsPerPage: 10\n        pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      dishratingcount\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      userreviewcount\n      vendorid\n      vendorname\n      vendorAddress\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    defaultSearch(input: {
        recordsPerPage: 10
        pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      dishratingcount
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      userreviewcount
      vendorid
      vendorname
      vendorAddress
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by vendorId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     vendorId : 157\n    \n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     vendorId : 157
    
     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by dishId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     dishId: 370\n    \n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     dishId: 370
    
     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by vendorId and dishId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     vendorId : 157\n     dishId: 370\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     vendorId : 157
     dishId: 370

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Reviews (by dishRating, vendorId and userId" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n      vendorId : 180\n      dishId: 388\n      dishRating: [\&quot;MUST EAT\&quot;]\n\n    recordsPerPage: 100\n    pageNo: 1\n    }){\n        currency\n        validimage\n        userreviewcount\n        dishratingcount\n        reviewId\n        rating\n        reviewPhotoId\n        dishid\n        dishname\n        diet\n        dishtypes\n        dishprice\n        cuisinetype\n        latitude\n        longitude\n        distanceInKM\n        userid\n        userfirstname\n        handle\n        userprofilephotoid\n        userphonenumber\n        vendorid\n        vendorname\n        vendorLocality\n        vendortype\n        ratingdescription\n        dynamicLink\n        creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
      vendorId : 180
      dishId: 388
      dishRating: [&quot;MUST EAT&quot;]

    recordsPerPage: 100
    pageNo: 1
    }){
        currency
        validimage
        userreviewcount
        dishratingcount
        reviewId
        rating
        reviewPhotoId
        dishid
        dishname
        diet
        dishtypes
        dishprice
        cuisinetype
        latitude
        longitude
        distanceInKM
        userid
        userfirstname
        handle
        userprofilephotoid
        userphonenumber
        vendorid
        vendorname
        vendorLocality
        vendortype
        ratingdescription
        dynamicLink
        creationtime
    }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by my userId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     userId: 119\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     userId: 119

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by another user&apos;s id)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n      userId: 117\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
      userId: 117

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by reactionType)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     reactionType: FAVOURITE\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     reactionType: FAVOURITE

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by reviewId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     reviewId: 1\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     reviewId: 1

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by reviewId - invalid review of loggedin user)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     reviewId: 730\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     reviewId: 730

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by reviewId - invalid review of another user)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     reviewId: 729\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     reviewId: 729

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by inputString)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    inputString: \&quot;paneer\&quot;\n  \n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    inputString: &quot;paneer&quot;
  
    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by inputSearchType-DISH)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    inputString: \&quot;paneer\&quot;\n    inputSearchType: DISH\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    inputString: &quot;paneer&quot;
    inputSearchType: DISH

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by inputSearchType-VENDOR)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tinputString: \&quot;Purva Resort\&quot;\n    \tinputSearchType: VENDOR\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	inputString: &quot;Purva Resort&quot;
    	inputSearchType: VENDOR

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by inputSearchType-PROFILE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tinputString: \&quot;Divya\&quot;\n    \tinputSearchType: PROFILE\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	inputString: &quot;Divya&quot;
    	inputSearchType: PROFILE

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by diet and dishTypes)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n     diet: [VEG,VEGAN]\n     dishTypes: [FAST_FOOD, DINNER, DESSERT, BRUNCH]\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
     diet: [VEG,VEGAN]
     dishTypes: [FAST_FOOD, DINNER, DESSERT, BRUNCH]

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by vendorType)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tvendorType: [\&quot;CAFE\&quot;,\&quot;OUTLET\&quot;,\&quot;RESTAURANT\&quot;]\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	vendorType: [&quot;CAFE&quot;,&quot;OUTLET&quot;,&quot;RESTAURANT&quot;]

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by cuisineType)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tcuisineType: [\&quot;INDIAN\&quot;,\&quot;ITALIAN\&quot;,\&quot;NORTH INDIAN\&quot;]\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	cuisineType: [&quot;INDIAN&quot;,&quot;ITALIAN&quot;,&quot;NORTH INDIAN&quot;]

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by priceRange)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tpriceRange: {min: 10 , max: 300,currency:\&quot;INR\&quot;}\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	priceRange: {min: 10 , max: 300,currency:&quot;INR&quot;}

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by timeSince)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \ttimeSince: \&quot;72-Hrs\&quot;\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	timeSince: &quot;72-Hrs&quot;

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by distance)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tdistance: {distance: \&quot;50\&quot;, longitude: \&quot;73.83015\&quot;, latitude: \&quot;18.435658\&quot;}\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	distance: {distance: &quot;50&quot;, longitude: &quot;73.83015&quot;, latitude: &quot;18.435658&quot;}

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by myBuddies)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tmyBuddies: true\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	myBuddies: true

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (multiple values search)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    \tinputString: \&quot;paneer\&quot;\n    \tinputSearchType: DISH #value should be VENDOR, DISH, PROFILE\n    \tdiet: [VEG,VEGAN]\n    \tdishTypes: [FAST_FOOD, DINNER, DESSERT, BRUNCH]\n    \tdishRating: [\&quot;MUST EAT\&quot;]\n    \tvendorType: [\&quot;CAFE\&quot;,\&quot;OUTLET\&quot;,\&quot;RESTAURANT\&quot;]\n    \tcuisineType: [\&quot;INDIAN\&quot;,\&quot;ITALIAN\&quot;,\&quot;NORTH INDIAN\&quot;]\n    \tpriceRange: {min: 10 , max: 300,currency:\&quot;INR\&quot;}\n    \ttimeSince: \&quot;2-Months\&quot;\n    \tdistance: {distance: \&quot;200\&quot;, longitude: \&quot;73.83015\&quot;, latitude: \&quot;18.435658\&quot;}\n    \tmyBuddies: true\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    	inputString: &quot;paneer&quot;
    	inputSearchType: DISH #value should be VENDOR, DISH, PROFILE
    	diet: [VEG,VEGAN]
    	dishTypes: [FAST_FOOD, DINNER, DESSERT, BRUNCH]
    	dishRating: [&quot;MUST EAT&quot;]
    	vendorType: [&quot;CAFE&quot;,&quot;OUTLET&quot;,&quot;RESTAURANT&quot;]
    	cuisineType: [&quot;INDIAN&quot;,&quot;ITALIAN&quot;,&quot;NORTH INDIAN&quot;]
    	priceRange: {min: 10 , max: 300,currency:&quot;INR&quot;}
    	timeSince: &quot;2-Months&quot;
    	distance: {distance: &quot;200&quot;, longitude: &quot;73.83015&quot;, latitude: &quot;18.435658&quot;}
    	myBuddies: true

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Search Review (by user preference)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviews(input: {\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      validimage\n      userreviewcount\n      dishratingcount\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviews(input: {
    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      validimage
      userreviewcount
      dishratingcount
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Save Dynamic Link" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{\n    GenerateDynamicLink(input:{\n        entity: DISHREVIEW\n        entityId: 117\n        deepLink: \&quot;http://palatepower.com/localhost:8080/search-review-api/graphql\&quot;\n    })\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{
    GenerateDynamicLink(input:{
        entity: DISHREVIEW
        entityId: 117
        deepLink: &quot;http://palatepower.com/localhost:8080/search-review-api/graphql&quot;
    })
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Rating Count of Dish" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    RatingCountOfDish(input:{\n        dishId:370\n        vendorId:157\n    }){\n        ratingId\n        ratingDescription\n        ratingCount\n        ratingPercentage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    RatingCountOfDish(input:{
        dishId:370
        vendorId:157
    }){
        ratingId
        ratingDescription
        ratingCount
        ratingPercentage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Review Count of User" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    ReviewCountOfUser(userId: 119){\n        userId\n        reviewCount\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    ReviewCountOfUser(userId: 119){
        userId
        reviewCount
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get Vendor Details" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    GetVendorDetails(vendorId: 157){\n        vendorname\n        vendorType\n        vendorLocality\n        vendorAddress\n        latitude\n        longitude   \n        totalNoOfReviews\n        totalDishCount\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    GetVendorDetails(vendorId: 157){
        vendorname
        vendorType
        vendorLocality
        vendorAddress
        latitude
        longitude   
        totalNoOfReviews
        totalDishCount
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Fetch User Reaction" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    fetchUserReactions(reviewIds:[102, 350, 578]){\n        reviewId\n        likedByMe\n        myFavourite\n        sharedByMe\n        reaction\n        reactionCount\n        userIds\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    fetchUserReactions(reviewIds:[102, 350, 578]){
        reviewId
        likedByMe
        myFavourite
        sharedByMe
        reaction
        reactionCount
        userIds
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Reaction Count (for LIKE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    reactionCount(input:{\n        reviewId:10,\n        reactionType: LIKE\n    }){\n        userCount\n        likedByMe\n        myFavourite\n        sharedByMe\n        userDetails{\n            userid\n            handle\n            userfirstname\n        }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    reactionCount(input:{
        reviewId:10,
        reactionType: LIKE
    }){
        userCount
        likedByMe
        myFavourite
        sharedByMe
        userDetails{
            userid
            handle
            userfirstname
        }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Reaction Count (for FAVOURITE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    reactionCount(input:{\n        reviewId:10,\n        reactionType: FAVOURITE\n    }){\n        userCount\n        likedByMe\n        myFavourite\n        sharedByMe\n        userDetails{\n            userid\n            handle\n            userfirstname\n        }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    reactionCount(input:{
        reviewId:10,
        reactionType: FAVOURITE
    }){
        userCount
        likedByMe
        myFavourite
        sharedByMe
        userDetails{
            userid
            handle
            userfirstname
        }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Reaction Count (for SHARE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    reactionCount(input:{\n        reviewId:10,\n        reactionType: SHARE\n    }){\n        userCount\n        likedByMe\n        myFavourite\n        sharedByMe\n        userDetails{\n            userid\n            handle\n            userfirstname\n        }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    reactionCount(input:{
        reviewId:10,
        reactionType: SHARE
    }){
        userCount
        likedByMe
        myFavourite
        sharedByMe
        userDetails{
            userid
            handle
            userfirstname
        }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Default Search" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    defaultSearchFromElastic(input: {\n        recordsPerPage: 10\n        pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    defaultSearchFromElastic(input: {
        recordsPerPage: 10
        pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by vendorId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     vendorId : 157\n    \n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     vendorId : 157
    
     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by dishId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     dishId: 370\n    \n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     dishId: 370
    
     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by vendorId and dishId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     vendorId : 157\n     dishId: 370\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     vendorId : 157
     dishId: 370

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by dishRating, vendorId and userId" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n      vendorId : 180\n      dishId: 388\n      dishRating: [\&quot;MUST EAT\&quot;]\n\n    recordsPerPage: 100\n    pageNo: 1\n    }){\n        reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
      vendorId : 180
      dishId: 388
      dishRating: [&quot;MUST EAT&quot;]

    recordsPerPage: 100
    pageNo: 1
    }){
        reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by my userId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     userId: 119\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     userId: 119

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by another user&apos;s id)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n      userId: 115\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
      userId: 115

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by reactionType)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     reactionType: FAVOURITE\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     reactionType: FAVOURITE

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by reviewId)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     reviewId: 1\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     reviewId: 1

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by reviewId - invalid review of loggedin user)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     reviewId: 730\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     reviewId: 730

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by reviewId - invalid review of another user)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     reviewId: 1\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     reviewId: 1

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by inputString)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    inputString: \&quot;paneer\&quot;\n  \n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage    \n   }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    inputString: &quot;paneer&quot;
  
    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage    
   }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by inputSearchType-DISH)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    inputString: \&quot;paneer\&quot;\n    inputSearchType: DISH\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    inputString: &quot;paneer&quot;
    inputSearchType: DISH

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by inputSearchType-VENDOR)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \tinputString: \&quot;Purva Resort\&quot;\n    \tinputSearchType: VENDOR\n\n     recordsPerPage: 10\n     pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	inputString: &quot;Purva Resort&quot;
    	inputSearchType: VENDOR

     recordsPerPage: 10
     pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by inputSearchType-PROFILE)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \tinputString: \&quot;Divya\&quot;\n    \tinputSearchType: PROFILE\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	inputString: &quot;Divya&quot;
    	inputSearchType: PROFILE

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by diet and dishTypes)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n     diet: [VEG,VEGAN]\n     dishTypes: [FAST_FOOD, DINNER, DESSERT, BRUNCH]\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
     diet: [VEG,VEGAN]
     dishTypes: [FAST_FOOD, DINNER, DESSERT, BRUNCH]

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by vendorType)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \tvendorType: [\&quot;CAFE\&quot;,\&quot;OUTLET\&quot;,\&quot;RESTAURANT\&quot;]\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	vendorType: [&quot;CAFE&quot;,&quot;OUTLET&quot;,&quot;RESTAURANT&quot;]

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by cuisineType)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \tcuisineType: [\&quot;INDIAN\&quot;,\&quot;ITALIAN\&quot;,\&quot;NORTH INDIAN\&quot;]\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	cuisineType: [&quot;INDIAN&quot;,&quot;ITALIAN&quot;,&quot;NORTH INDIAN&quot;]

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by priceRange)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \tpriceRange: {min: 10 , max: 300,currency:\&quot;INR\&quot;}\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	priceRange: {min: 10 , max: 300,currency:&quot;INR&quot;}

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by timeSince)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \ttimeSince: \&quot;72-Hrs\&quot;\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	timeSince: &quot;72-Hrs&quot;

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by distance)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \tdistance: {distance: \&quot;50\&quot;, longitude: \&quot;73.83015\&quot;, latitude: \&quot;18.435658\&quot;}\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	distance: {distance: &quot;50&quot;, longitude: &quot;73.83015&quot;, latitude: &quot;18.435658&quot;}

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by myBuddies)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    \tmyBuddies: true\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    	myBuddies: true

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (multiple values search)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    inputString: \&quot;paneer\&quot;\n    inputSearchType: DISH #value should be VENDOR, DISH, PROFILE\n    diet: [VEG,VEGAN]\n    dishTypes: [FAST_FOOD, FUSION, DESSERT, BRUNCH, SNACKS, DINNER]\n    dishRating: [\&quot;MUST EAT\&quot;]\n    vendorType: [\&quot;CAFE\&quot;,\&quot;OUTLET\&quot;,\&quot;RESTAURANT\&quot;]\n    cuisineType: [\&quot;INDIAN\&quot;,\&quot;ITALIAN\&quot;,\&quot;NORTH INDIAN\&quot;]\n    priceRange: {min: 10 , max: 600, currency:\&quot;INR\&quot;}\n    timeSince: \&quot;2-Months\&quot;\n    distance: {distance: \&quot;200\&quot;, longitude: \&quot;73.83015\&quot;, latitude: \&quot;18.435658\&quot;}\n    myBuddies: true\n\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    inputString: &quot;paneer&quot;
    inputSearchType: DISH #value should be VENDOR, DISH, PROFILE
    diet: [VEG,VEGAN]
    dishTypes: [FAST_FOOD, FUSION, DESSERT, BRUNCH, SNACKS, DINNER]
    dishRating: [&quot;MUST EAT&quot;]
    vendorType: [&quot;CAFE&quot;,&quot;OUTLET&quot;,&quot;RESTAURANT&quot;]
    cuisineType: [&quot;INDIAN&quot;,&quot;ITALIAN&quot;,&quot;NORTH INDIAN&quot;]
    priceRange: {min: 10 , max: 600, currency:&quot;INR&quot;}
    timeSince: &quot;2-Months&quot;
    distance: {distance: &quot;200&quot;, longitude: &quot;73.83015&quot;, latitude: &quot;18.435658&quot;}
    myBuddies: true

    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Elastic Search (by user preference)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    searchReviewFromElastic(input: {\n    recordsPerPage: 10\n    pageNo: 1\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      distanceInKM\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorLocality\n      vendorAddress\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    searchReviewFromElastic(input: {
    recordsPerPage: 10
    pageNo: 1
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      distanceInKM
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorLocality
      vendorAddress
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="My Favourite Reviews" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    myFavouriteReviews(input:{\n        recordsPerPage:20,\n        pageNo:0\n    }){\n      reviewId\n      rating\n      reviewPhotoId\n      dishid\n      dishname\n      diet\n      dishtypes\n      dishprice\n      currency\n      cuisinetype\n      latitude\n      longitude\n      userid\n      userfirstname\n      handle\n      userprofilephotoid\n      userphonenumber\n      vendorid\n      vendorname\n      vendorAddress\n      vendorLocality\n      vendortype\n      ratingdescription\n      dynamicLink\n      creationtime\n      validimage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    myFavouriteReviews(input:{
        recordsPerPage:20,
        pageNo:0
    }){
      reviewId
      rating
      reviewPhotoId
      dishid
      dishname
      diet
      dishtypes
      dishprice
      currency
      cuisinetype
      latitude
      longitude
      userid
      userfirstname
      handle
      userprofilephotoid
      userphonenumber
      vendorid
      vendorname
      vendorAddress
      vendorLocality
      vendortype
      ratingdescription
      dynamicLink
      creationtime
      validimage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="-1294635157">errors</stringProp>
            <stringProp name="184708874">&quot;success&quot;:false</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">6</intProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Data API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Common Domain Values (by empty searchString)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query { \n    domainValues (input: \n        { searchString: \&quot;\&quot;,\n          page: 1, \n          recordsPerPage: 10 \n        })\n        {\n          currencies\n          { \n              countryName \n              countryCode \n              currencyName \n              currencyCode \n              isoCode\n              currencySymbol \n          }\n          diet {key value} ,\n          dishTypes { key value category }, \n          timeRange { key value }, \n          cuisineType { key value }, \n          vendorTypes { key value }, \n          ratings { key value }, \n          dishNames { key value }\n          assetsBaseUrl\n        } \n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/data-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query"> query { 
    domainValues (input: 
        { searchString: &quot;&quot;,
          page: 1, 
          recordsPerPage: 10 
        })
        {
          currencies
          { 
              countryName 
              countryCode 
              currencyName 
              currencyCode 
              isoCode
              currencySymbol 
          }
          diet {key value} ,
          dishTypes { key value category }, 
          timeRange { key value }, 
          cuisineType { key value }, 
          vendorTypes { key value }, 
          ratings { key value }, 
          dishNames { key value }
          assetsBaseUrl
        } 
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Common Domain Values (by searchString)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query { \n    domainValues (input: \n        { searchString: \&quot;91\&quot;,\n          page: 1, \n          recordsPerPage: 10 \n        })\n        {\n          currencies\n          { \n              countryName \n              countryCode \n              currencyName \n              currencyCode \n              isoCode\n              currencySymbol \n          }\n          diet {key value} ,\n          dishTypes { key value category }, \n          timeRange { key value }, \n          cuisineType { key value }, \n          vendorTypes { key value }, \n          ratings { key value }, \n          dishNames { key value }\n          assetsBaseUrl\n        } \n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/data-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query"> query { 
    domainValues (input: 
        { searchString: &quot;91&quot;,
          page: 1, 
          recordsPerPage: 10 
        })
        {
          currencies
          { 
              countryName 
              countryCode 
              currencyName 
              currencyCode 
              isoCode
              currencySymbol 
          }
          diet {key value} ,
          dishTypes { key value category }, 
          timeRange { key value }, 
          cuisineType { key value }, 
          vendorTypes { key value }, 
          ratings { key value }, 
          dishNames { key value }
          assetsBaseUrl
        } 
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Vendors (by empty searchString)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query { \n    domainValues \n        (input: \n            { searchString: \&quot;Sweet Land\&quot;, longitude: 77.652654, latitude: 12.868031, \n            }\n        )\n        { \n            vendors \n                {   \n                    source\n                    key\n                    value \n                } \n            } \n        }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/data-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query { 
    domainValues 
        (input: 
            { searchString: &quot;Sweet Land&quot;, longitude: 77.652654, latitude: 12.868031, 
            }
        )
        { 
            vendors 
                {   
                    source
                    key
                    value 
                } 
            } 
        }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Vendors (by searchString)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query { \n    domainValues \n        (input: \n            { searchString: \&quot;Shri\&quot;, longitude: 77.652654, latitude: 12.868031, \n            }\n        )\n        { \n            vendors \n                {   \n                    source\n                    key\n                    value \n                } \n            } \n        }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/data-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query { 
    domainValues 
        (input: 
            { searchString: &quot;Shri&quot;, longitude: 77.652654, latitude: 12.868031, 
            }
        )
        { 
            vendors 
                {   
                    source
                    key
                    value 
                } 
            } 
        }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="-1294635157">errors</stringProp>
            <stringProp name="184708874">&quot;success&quot;:false</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">6</intProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Error Response" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Signup (already exist)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;phonenumber&quot;: &quot;919405728957&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/user/signup</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51517">409</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Signup (incorrect phonenumber)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;phonenumber&quot;: &quot;91990&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/user/signup</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51508">400</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login (user not present)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;phonenumber&quot;: &quot;919000000909&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/user/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm Login (wrong otp)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;phonenumber&quot;: &quot;919405728957&quot;,&#xd;
    &quot;confirmationCode&quot;: &quot;123456&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/user/confirm-login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="52469">500</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save User (already present handle)" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/unicorn.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/unicorn.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;: &quot;mutation SaveUser($input: UserInput!)  { saveUser(input: $input)   { success      user {          handle         firstname          lastname         email         profilephotoid         bio       }    }  }&quot;, &quot;variables&quot;:  {&quot;input&quot;:      {    &quot;handle&quot;:&quot;Divya&quot;,    &quot;firstname&quot;:&quot;Riya&quot;,    &quot;lastname&quot;:&quot;D&quot;,    &quot;gender&quot;:&quot;Female&quot;,    &quot;dob&quot;:&quot;2000-01-22&quot;,    &quot;email&quot;:&quot;riya@gmail.com&quot;,    &quot;bio&quot;: &quot;Foodie&quot;   }  } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get User (for user not in db)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n   getUser(input: {\n    #   id : 1190\n    #   handle : \&quot;Riyaz\&quot;\n      phonenumber : 918080808080\n    }){\n        isMyBuddy\n        user {\n            id\n            handle\n            firstname\n            lastname\n            gender\n            dob\n            email\n            phonenumber\n            profilephotoid\n            bio\n            buddylist {\n             id\n             handle\n             firstname\n             lastname\n             gender\n             dob\n             email\n             phonenumber\n             profilephotoid\n             bio\n        }\n    }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
   getUser(input: {
    #   id : 1190
    #   handle : &quot;Riyaz&quot;
      phonenumber : 918080808080
    }){
        isMyBuddy
        user {
            id
            handle
            firstname
            lastname
            gender
            dob
            email
            phonenumber
            profilephotoid
            bio
            buddylist {
             id
             handle
             firstname
             lastname
             gender
             dob
             email
             phonenumber
             profilephotoid
             bio
        }
    }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Validate Handle (invalid)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    isHandleAvailable(input:\&quot;#Divya\&quot;)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    isHandleAvailable(input:&quot;#Divya&quot;)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Add User Buddies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation {\n\t\tsaveUserBuddies(input: {\n                userId: 119\n                buddyId: 1180\n            }\n        ) \n        {\n\t\t  success\n            message\n\t\t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation {
		saveUserBuddies(input: {
                userId: 119
                buddyId: 1180
            }
        ) 
        {
		  success
            message
		}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Remove User Buddies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation {\n\t\tdeleteUserBuddies(input: {\n                userId: 119\n                buddyId: 1180\n            }\n        ) \n        {\n\t\t  success\n            message\n\t\t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation {
		deleteUserBuddies(input: {
                userId: 119
                buddyId: 1180
            }
        ) 
        {
		  success
            message
		}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get User Preference" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{ \n    getUserPreference(userId: 1190){ \n        userId\n        diet \n        dishTypes\n        location \n        cuisine\n        vendorType \n        priceRange { min max }\n        longitude\n        latitude\n    } \n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/user-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{ 
    getUserPreference(userId: 1190){ 
        userId
        diet 
        dishTypes
        location 
        cuisine
        vendorType 
        priceRange { min max }
        longitude
        latitude
    } 
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Review (already post review)" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/paneer-koftaa.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/paneer-koftaa.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:
 &quot;mutation 
 ($dishReview: DishReviewInput!) 
  { PostDishReview
   (dishReview: $dishReview)
   { success
    dishReview
     { 
      userId
      dishId
      cuisineType
      rating
      photoId
      dishPrice
      currencyCode
      vendorId
      dishName
      diet 
      dishTypes 
      longitude 
      latitude 
     } 
    } 
  }&quot;,
  &quot;variables&quot;:
   {&quot;dishReview&quot;:                    
     {
      &quot;dishId&quot;:1,                    
      &quot;cuisineType&quot;:&quot;ITALIANA&quot;,
      &quot;rating&quot;:4,
      &quot;dishPrice&quot;:150,
      &quot;currencyCode&quot;:&quot;INR&quot;,
      &quot;vendorName&quot;:&quot; Purva resort, Revtale Road,malvan 416606, India &quot;,
      &quot;vendorType&quot;:&quot;RESTAURANT&quot;,
      &quot;vendorSource&quot;:&quot;CUSTOM&quot;,
      &quot;dishName&quot;:&quot;paneer kofta&quot;,
      &quot;diet&quot;:&quot;VEG&quot;,
   &quot;dishTypes&quot;:[&quot;MAINS&quot;,&quot;BRUNCH&quot;],
      &quot;longitude&quot;:&quot;73.37484&quot;,
      &quot;latitude&quot;:&quot;16.371944&quot;
    }
   }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Dish Review (reviewid not present)" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/paneer-koftaa.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/paneer-koftaa.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:
 &quot;mutation 
 ($dishReview: DishReviewInput!) 
  {UpdateDishReview
   (dishReview: $dishReview)
   { success
    dishReview
     { id
      userId
      dishId
      cuisineType
      rating
      photoId
      dishPrice
      currencyCode
      vendorId
      dishName
      diet 
      dishTypes 
      longitude 
      latitude 
     } 
    } 
  }&quot;,
  &quot;variables&quot;:
   {&quot;dishReview&quot;:                    
     {
      &quot;id&quot;:5780000,
      &quot;dishId&quot;:1,                    
             &quot;cuisineType&quot;:&quot;INDIAN&quot;,
      &quot;rating&quot;:4,
      &quot;dishPrice&quot;:190,
      &quot;currencyCode&quot;:&quot;INR&quot;,
      &quot;vendorName&quot;:&quot; Purva resort, Revtale Road,malvan 416606, India &quot;,
      &quot;vendorType&quot;:&quot;RESTAURANT&quot;,
      &quot;vendorSource&quot;:&quot;CUSTOM&quot;,
      &quot;dishName&quot;:&quot;paneer kofta&quot;,
      &quot;diet&quot;:&quot;VEG&quot;,
   &quot;dishTypes&quot;:[&quot;MAINS&quot;,&quot;BRUNCH&quot;],
      &quot;longitude&quot;:&quot;73.37484&quot;,
      &quot;latitude&quot;:&quot;16.371944&quot;
    }
   }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Dish Review ( another user&apos;s reviewId )" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="images/paneer-koftaa.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">images/paneer-koftaa.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operations" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;query&quot;:
 &quot;mutation 
 ($dishReview: DishReviewInput!) 
  {UpdateDishReview
   (dishReview: $dishReview)
   { success
    dishReview
     { id
      userId
      dishId
      cuisineType
      rating
      photoId
      dishPrice
      currencyCode
      vendorId
      dishName
      diet 
      dishTypes 
      longitude 
      latitude 
     } 
    } 
  }&quot;,
  &quot;variables&quot;:
   {&quot;dishReview&quot;:                    
     {
      &quot;id&quot;:643,
      &quot;dishId&quot;:1,                    
      &quot;cuisineType&quot;:&quot;INDIAN&quot;,
      &quot;rating&quot;:4,
      &quot;dishPrice&quot;:190,
      &quot;currencyCode&quot;:&quot;INR&quot;,
      &quot;vendorName&quot;:&quot; Purva resort, Revtale Road,malvan 416606, India &quot;,
      &quot;vendorType&quot;:&quot;RESTAURANT&quot;,
      &quot;vendorSource&quot;:&quot;CUSTOM&quot;,
      &quot;dishName&quot;:&quot;paneer kofta&quot;,
      &quot;diet&quot;:&quot;VEG&quot;,
   &quot;dishTypes&quot;:[&quot;MAINS&quot;,&quot;BRUNCH&quot;],
      &quot;longitude&quot;:&quot;73.37484&quot;,
      &quot;latitude&quot;:&quot;16.371944&quot;
    }
   }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operations</stringProp>
                <stringProp name="HTTPArgument.content_type">multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Add User Reaction (reviewid not present)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;# reaction should be LIKE or FAVOURITE\nmutation{ updateUserReaction(inputReaction:{ reviewId:5780000, \n    userId:119, \n    reaction:LIKE \n    value:true\n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query"># reaction should be LIKE or FAVOURITE
mutation{ updateUserReaction(inputReaction:{ reviewId:5780000, 
    userId:119, 
    reaction:LIKE 
    value:true
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Add User Reaction (userid which not present)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;# reaction should be LIKE or FAVOURITE\nmutation{ updateUserReaction(inputReaction:{ reviewId:578, \n    userId:11900, \n    reaction:LIKE \n    value:true \n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query"># reaction should be LIKE or FAVOURITE
mutation{ updateUserReaction(inputReaction:{ reviewId:578, 
    userId:11900, 
    reaction:LIKE 
    value:true 
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Add User Reaction ( error for share false)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;# reaction should be LIKE or FAVOURITE\nmutation{ updateUserReaction(inputReaction:{ reviewId:578, \n    userId:119, \n    reaction:SHARE \n    value:false \n    })\n    {   success \n        reactionDTO{ \n            reviewId \n            userId \n            reaction \n            value \n        } \n    } }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query"># reaction should be LIKE or FAVOURITE
mutation{ updateUserReaction(inputReaction:{ reviewId:578, 
    userId:119, 
    reaction:SHARE 
    value:false 
    })
    {   success 
        reactionDTO{ 
            reviewId 
            userId 
            reaction 
            value 
        } 
    } }</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Save Dynamic Link ( entityId )" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{\n    GenerateDynamicLink(input:{\n        entity: DISHREVIEW\n        entityId: 117090\n        deepLink: \&quot;http://palatepower.com/localhost:8080/search-review-api/graphql\&quot;\n    })\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{
    GenerateDynamicLink(input:{
        entity: DISHREVIEW
        entityId: 117090
        deepLink: &quot;http://palatepower.com/localhost:8080/search-review-api/graphql&quot;
    })
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Save Dynamic Link ( Deeplink )" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation{\n    GenerateDynamicLink(input:{\n        entity: DISHREVIEW\n        entityId: 117\n        deepLink: \&quot;http://palate.com/localhost:8080/search-review-api/graphql\&quot;\n    })\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation{
    GenerateDynamicLink(input:{
        entity: DISHREVIEW
        entityId: 117
        deepLink: &quot;http://palate.com/localhost:8080/search-review-api/graphql&quot;
    })
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Rating Count of Dish (dishId not present)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    RatingCountOfDish(input:{\n        dishId:370909\n        vendorId:157\n    }){\n        ratingId\n        ratingDescription\n        ratingCount\n        ratingPercentage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    RatingCountOfDish(input:{
        dishId:370909
        vendorId:157
    }){
        ratingId
        ratingDescription
        ratingCount
        ratingPercentage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Rating Count of Dish (vendorId not present)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    RatingCountOfDish(input:{\n        dishId:370\n        vendorId:157809\n    }){\n        ratingId\n        ratingDescription\n        ratingCount\n        ratingPercentage\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    RatingCountOfDish(input:{
        dishId:370
        vendorId:157809
    }){
        ratingId
        ratingDescription
        ratingCount
        ratingPercentage
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Review Count of User (for userid not in db)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    ReviewCountOfUser(userId: 11909090){\n        userId\n        reviewCount\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    ReviewCountOfUser(userId: 11909090){
        userId
        reviewCount
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get Vendor Details (for vendorId not in db)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    GetVendorDetails(vendorId: 1579008){\n        vendorname\n        vendorType\n        vendorLocality\n        vendorAddress\n        latitude\n        longitude   \n        totalNoOfReviews\n        totalDishCount\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    GetVendorDetails(vendorId: 1579008){
        vendorname
        vendorType
        vendorLocality
        vendorAddress
        latitude
        longitude   
        totalNoOfReviews
        totalDishCount
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Fetch User Reaction (empty list)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query{\n    fetchUserReactions(reviewIds:[]){\n        reviewId\n        likedByMe\n        myFavourite\n        sharedByMe\n        reaction\n        reactionCount\n        userIds\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query{
    fetchUserReactions(reviewIds:[]){
        reviewId
        likedByMe
        myFavourite
        sharedByMe
        reaction
        reactionCount
        userIds
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Reaction Count (for reviewId not in db)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;# here you can send reviewIds and reactionType should be enum ( LIKE, FAVOURITE, SHARE ). \nquery{\n    reactionCount(input:{\n        reviewId:109090,\n        reactionType: LIKE\n    }){\n        userCount\n        likedByMe\n        myFavourite\n        sharedByMe\n        userDetails{\n            userid\n            handle\n            userfirstname\n        }\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/search-review-api/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query"># here you can send reviewIds and reactionType should be enum ( LIKE, FAVOURITE, SHARE ). 
query{
    reactionCount(input:{
        reviewId:109090,
        reactionType: LIKE
    }){
        userCount
        likedByMe
        myFavourite
        sharedByMe
        userDetails{
            userid
            handle
            userfirstname
        }
    }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="-1294635157">errors</stringProp>
            <stringProp name="184708874">&quot;success&quot;:false</stringProp>
            <stringProp name="446847076">{&quot;data&quot;:{&quot;RatingCountOfDish&quot;:[{&quot;ratingId&quot;:5,&quot;ratingDescription&quot;:&quot;MUST EAT&quot;,&quot;ratingCount&quot;:0,&quot;ratingPercentage&quot;:0.0},{&quot;ratingId&quot;:4,&quot;ratingDescription&quot;:&quot;RECOMMENDED&quot;,&quot;ratingCount&quot;:0,&quot;ratingPercentage&quot;:0.0},{&quot;ratingId&quot;:3,&quot;ratingDescription&quot;:&quot;AVERAGE&quot;,&quot;ratingCount&quot;:0,&quot;ratingPercentage&quot;:0.0},{&quot;ratingId&quot;:2,&quot;ratingDescription&quot;:&quot;EDIBLE&quot;,&quot;ratingCount&quot;:0,&quot;ratingPercentage&quot;:0.0},{&quot;ratingId&quot;:1,&quot;ratingDescription&quot;:&quot;AVOID&quot;,&quot;ratingCount&quot;:0,&quot;ratingPercentage&quot;:0.0},{&quot;ratingId&quot;:0,&quot;ratingDescription&quot;:&quot;DON&apos;T EAT&quot;,&quot;ratingCount&quot;:0,&quot;ratingPercentage&quot;:0.0}]}</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">48</intProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${token}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Use &quot;http&quot; protocol for Dev &amp; &quot;https&quot; for Prod</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">palate-app-alb-1679496231.ap-south-1.elb.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Dev baseURL -&gt; palate-app-alb-1679496231.ap-south-1.elb.amazonaws.com

Prod baseURL -&gt; palatepowerapi.link</stringProp>
          </elementProp>
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">eyJraWQiOiJSbWs4b0NuYzJ0QUdja1hcL01YeTdcL09IcmtPNGhyU1pwaThiZjVJT3FwQ289IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJjYTVkMTQxOC01N2I0LTQzZTktYmVhMS1mN2RhYTcwOWYxMzYiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGgtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aC0xX3poS2JBaW9SMyIsImNsaWVudF9pZCI6IjdmNGh0cmJ1NGV2cWE2ZWp0dGRkaGVtNzNrIiwib3JpZ2luX2p0aSI6IjdhYTk4MGRkLTc3N2YtNDRkYS05MTdhLTkwZGE3YWNmYmI2MSIsImV2ZW50X2lkIjoiZGI4MWE5NzgtOTA4Yy00OTE5LWJmNGMtMzQ5ZWY2MjRlNzY2IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY4NzE3NDY5MCwiZXhwIjoxNjg3MjYxMDkwLCJpYXQiOjE2ODcxNzQ2OTAsImp0aSI6IjQ3ODFlOThjLTdjMWQtNGEwZC1hOTZiLTZiNzJiNzExMWM0MCIsInVzZXJuYW1lIjoiOTE5NDA1NzI4OTU3In0.FN0JwG3Oth-YB5XJ8A3h1iBdsYn-yW3WwoiBxEWuHdQK20ElHnP0Z7MJpTU-6A7GPoDbwgfdu0LLfxr2yJ2XUJYhRWYO0AKqiggiio8yK_mCKosLJkxh7gLARQ4hLh6OAYFFq9dMxjLP4i_32IeP0KXZ3VmY9aNJPS4RRkyFnOfNHql6XqCq0gD-u2TlyJQJiS639ZMUPSpCF5prguOY6NVV_4mmzr-ztWolLeMuoH3E89vN1TfWt9tc4MIIuc7wYew60r61j_b5TJazcfLOuGGctx1iW913o63CDXbmxVeqd2mGD5fdhFecdOu7bRJvPbfwjWs9WG4NU2Bh4FrJqA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Enter your token</stringProp>
          </elementProp>
          <elementProp name="phoneNumber" elementType="Argument">
            <stringProp name="Argument.name">phoneNumber</stringProp>
            <stringProp name="Argument.value">919876543210</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
